// Задача doubles: Одинаковые элементы списка
// Дана последовательность L из N целых чисел. Необходимо определить, есть ли в данной последовательности хотя бы два одинаковых элемента.

// В данной задаче запрещается использовать массивы. Для хранения последовательности необходимо использовать односвязные списки. Для решения задачи требуется описать нерекурсивную логическую функцию doubles(L), которая определяет, есть ли в списке L одинаковые эелементы.

// Формат входных данных
// В первой строке вводится целое число N — количество элементов последовательности L ( 0 ≤ N ≤ 1000 ).
// В второй строке вводится N целых чисел — элементы последовательности L ( |Li| ≤ 32000 ).

// Формат результата
// Необходимо вывести "YES", если в последовтельности есть хотя бы два одинаковых элемента, и "NO" — иначе.

type
    List = ^TNode;
    TNode = record
        data: integer;
        next: List;
    end;

procedure input(var L: List; n: integer);
{ Создаёт список из n элементов }
begin
    if n = 0 then
    begin
        L := nil;
        exit;
    end;
    new(L);
    read(L^.data);
    input(L^.next, n - 1);
end;

procedure clear(var L: List);
{ Очищает список }
begin
    if L = nil then
        exit;
    clear(L^.next);
    dispose(L);
end;

function doubles(L: List): boolean;
{ Проверяет, есть ли в списке одинаковые элементы}
var
    p, q: List;
begin
    doubles := false;
    p := L;

    // Перебор всех пар элементов
    while p <> nil do
    begin

        // Следующие пары с p-м элементом
        q := p^.next;
        while q <> nil do
        begin

            // Если элементы равны, то в списке есть одинаковые элементы
            if p^.data = q^.data then
            begin
                doubles := true;
                exit;
            end;

            // Переход к следующему элементу для пары с p-м элементом
            q := q^.next;
        end;

        // Переход к следующему элементу для всех пар
        p := p^.next;
    end;
end;

var
    L: List;
    n: integer;

begin
    // Заполнение списка
    read(n);
    input(L, n);

    // Проверка на наличие одинаковых элементов
    if doubles(L) then
        writeln('YES')
    else
        writeln('NO');

    // Очистка памяти
    clear(L);
end.
